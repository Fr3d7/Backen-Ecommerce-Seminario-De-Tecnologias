name: backend-ci

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: backend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-migrate:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      ASPNETCORE_ENVIRONMENT: CI
      MSSQL_SA_PASSWORD: ${{ secrets.CI_MSSQL_SA_PASSWORD }}
      JWT_KEY: ${{ secrets.CI_JWT_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # SDK 8 para compilar + runtime 7 para correr EF si tu proyecto es net7.0
      - name: Setup .NET SDKs (8 + 7)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            7.0.x
          cache: true

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      # üöÄ Levantamos SQL Server con docker (sin usar 'services:' para poder inyectar secretos)
      - name: Start SQL Server container
        shell: bash
        run: |
          docker rm -f ci-mssql 2>/dev/null || true
          docker run -d --name ci-mssql \
            -e "ACCEPT_EULA=Y" \
            -e "MSSQL_SA_PASSWORD=$MSSQL_SA_PASSWORD" \
            -p 1433:1433 \
            mcr.microsoft.com/mssql/server:2022-latest

      # ‚è≥ Espera robusta al puerto 1433; no dependemos de sqlcmd
      - name: Wait for SQL to be ready
        shell: bash
        run: |
          echo "Waiting for SQL Server on 127.0.0.1:1433 ..."
          for i in {1..90}; do
            (echo > /dev/tcp/127.0.0.1/1433) >/dev/null 2>&1 && ok=1 && break || ok=0
            sleep 2
          done
          if [ "$ok" != "1" ]; then
            echo "SQL did not open port 1433 in time"; docker logs ci-mssql | tail -n 200; exit 1
          fi
          # dar unos segundos extra para que acepte logins
          sleep 15

      - name: Install EF tools
        run: dotnet tool install --global dotnet-ef

      - name: Add dotnet tools to PATH
        shell: bash
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Apply EF migrations
        env:
          ConnectionStrings__ConnectionString: "Server=127.0.0.1,1433;Database=EcommerceCI;User Id=sa;Password=${{ env.MSSQL_SA_PASSWORD }};TrustServerCertificate=True;MultipleActiveResultSets=True"
          ConnectionStrings__DefaultConnection: "Server=127.0.0.1,1433;Database=EcommerceCI;User Id=sa;Password=${{ env.MSSQL_SA_PASSWORD }};TrustServerCertificate=True;MultipleActiveResultSets=True"
          JwtSettings__Key: ${{ env.JWT_KEY }}
        run: dotnet ef database update --project src/Api/ --startup-project src/Api/

      - name: Unit tests (non-blocking)
        run: dotnet test --no-build --verbosity normal || true

      # Si algo falla, mostramos logs del contenedor para ver r√°pido el motivo
      - name: Dump SQL logs on failure
        if: failure()
        run: docker logs ci-mssql | tail -n 200
